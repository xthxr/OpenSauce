import java.util.*;

/**
 * Problem: Majority Element II
 *
 * Given an integer array of size n, find all elements that appear 
 * more than ⌊ n/3 ⌋ times.
 * 
 * Note:
 * - The result can have at most 2 elements.
 * - Must run in O(n) time and O(1) extra space.
 *
 * Example:
 * Input: nums = [3,2,3]
 * Output: [3]
 *
 * Input: nums = [1,1,1,3,3,2,2,2]
 * Output: [1,2]
 *
 * Explanation:
 * For n=8, ⌊n/3⌋ = 2
 * 1 appears 3 times (>2)
 * 2 appears 3 times (>2)
 * So result = [1,2]
 */

public class MajorityElementII {

    public List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new ArrayList<>();

        int num1 = Integer.MIN_VALUE, count1 = 0;
        int num2 = Integer.MIN_VALUE, count2 = 0;

        // Step 1: Find potential candidates using Boyer-Moore Voting
        for (int num : nums) {
            if (num == num1) {
                count1++;
            } else if (num == num2) {
                count2++;
            } else if (count1 == 0) {
                num1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                num2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        // Step 2: Verify counts of candidates
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == num1) count1++;
            else if (num == num2) count2++;
        }

        if (count1 > nums.length / 3) result.add(num1);
        if (count2 > nums.length / 3) result.add(num2);

        return result;
    }

    // Main method for testing
    public static void main(String[] args) {
        MajorityElementII obj = new MajorityElementII();

        int[] nums1 = {3, 2, 3};
        int[] nums2 = {1, 1, 1, 3, 3, 2, 2, 2};

        System.out.println("Input: [3,2,3] → Output: " + obj.majorityElement(nums1)); 
        // Expected: [3]

        System.out.println("Input: [1,1,1,3,3,2,2,2] → Output: " + obj.majorityElement(nums2)); 
        // Expected: [1,2]
    }
}
